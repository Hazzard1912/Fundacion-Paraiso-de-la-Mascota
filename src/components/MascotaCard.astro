---
interface Props {
    id: number;
    nombre: string;
    imagen: string;
    edad: string;
    tamaño?: string;
    descripcion: string;
    especie?: string;
}

const {
    id,
    nombre,
    imagen,
    edad,
    tamaño,
    descripcion,
    especie,
} = Astro.props;

// Obtenemos la URL completa para compartir
const siteUrl = Astro.url.origin;
const mascotaUrl = `${siteUrl}/adopta/${id}`;

// Mensaje para compartir
const shareTitle = `¡Conoce a ${nombre}!`;
const shareText = `${nombre} está buscando una familia. ${descripcion.substring(0, 100)}...`;

// URLs para compartir en diferentes plataformas
const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(`${shareTitle} ${shareText} ${mascotaUrl}`)}`;
const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(mascotaUrl)}`;
const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareTitle)}&url=${encodeURIComponent(mascotaUrl)}`;
---

<article
    class="bg-white rounded-2xl overflow-hidden shadow-md hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 h-full flex flex-col max-w-sm w-full"
    data-mascota-id={id}
>
    <div class="relative w-full h-52 overflow-hidden">
        <img
            src={imagen}
            alt={`Foto de ${nombre}`}
            class="w-full h-full object-cover transition-transform duration-500 hover:scale-105"
            loading="lazy"
        />
        <div class="absolute top-4 right-4 flex gap-2 flex-wrap justify-end">
            {especie && (
                <span class="px-3 py-1 bg-amber-500 text-white rounded-full text-xs font-medium shadow-lg">
                    {especie}
                </span>
            )}
            {tamaño && (
                <span class="px-3 py-1 bg-white/90 text-amber-900 rounded-full text-xs font-medium shadow-lg">
                    {tamaño}
                </span>
            )}
        </div>
    </div>

    <div class="p-5 flex-grow flex flex-col min-h-[220px]">
        <div class="flex justify-between items-start mb-3">
            <div>
                <h3 class="text-xl font-semibold text-amber-900 hover:text-amber-600 transition-colors line-clamp-1">
                    {nombre}
                </h3>
                <p class="text-gray-500 text-sm">{edad}</p>
            </div>
        </div>

        <p class="text-gray-600 text-sm line-clamp-3 mb-4 flex-grow">
            {descripcion}
        </p>

        <div class="flex gap-2 mt-auto pt-3">
            <a
                href={`/mascotas/${documentId}`}
                class="flex-1 bg-amber-600 text-white text-center py-2 px-3 rounded-lg hover:bg-amber-700 transition-colors font-medium text-sm"
            >
                Conocer más
            </a>
        </div>
    </div>
</article>

<script define:vars={{ id }}>
    // Script específico para esta tarjeta
    document.addEventListener("DOMContentLoaded", () => {
        const shareButton = document.getElementById(`share-btn-${id}`);
        const shareMenu = document.getElementById(`share-menu-${id}`);

        // Si el navegador soporta la API de compartir, usamos esa
        const canNativeShare = navigator.share !== undefined;

        if (shareButton && shareMenu) {
            shareButton.addEventListener("click", () => {
                if (canNativeShare) {
                    // Usar API nativa de compartir si está disponible
                    navigator
                        .share({
                            title: shareMenu.getAttribute("data-title"),
                            text: shareMenu.getAttribute("data-text"),
                            url: window.location.href,
                        })
                        .catch((err) => {
                            console.error("Error al compartir:", err);
                            // Si falla, mostramos el menú tradicional
                            toggleShareMenu();
                        });
                } else {
                    // Mostrar menú desplegable en dispositivos que no soportan la API Share
                    toggleShareMenu();
                }
            });

            function toggleShareMenu() {
                const isVisible = !shareMenu.classList.contains("hidden");

                // Cerrar todos los menús abiertos primero
                document.querySelectorAll(".share-menu").forEach((menu) => {
                    if (menu !== shareMenu) {
                        menu.classList.add("hidden", "opacity-0", "scale-95");
                        menu.classList.remove("opacity-100", "scale-100");
                    }
                });

                // Alternar la visibilidad de este menú
                if (isVisible) {
                    // Ocultar menú
                    shareMenu.classList.add("opacity-0", "scale-95");
                    setTimeout(() => {
                        shareMenu.classList.add("hidden");
                    }, 200);
                } else {
                    // Mostrar menú
                    shareMenu.classList.remove("hidden");
                    setTimeout(() => {
                        shareMenu.classList.remove("opacity-0", "scale-95");
                        shareMenu.classList.add("opacity-100", "scale-100");
                    }, 10);
                }
            }

            // Cerrar el menú cuando se hace clic fuera
            document.addEventListener("click", (event) => {
                if (
                    shareMenu &&
                    !shareMenu.classList.contains("hidden") &&
                    !shareMenu.contains(event.target) &&
                    !shareButton.contains(event.target)
                ) {
                    toggleShareMenu();
                }
            });
        }
    });
</script>

<style>
    .line-clamp-3 {
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
</style>
